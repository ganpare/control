This file is a merged representation of the entire codebase, combined into a single document.
Generated by Repomix on: 2025-02-09T02:01:00.614Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
scripts/
  hello.sh
  status.sh
static/
  js/
    main.js
  index.html
app.py
requirements.txt

================================================================
Files
================================================================

================
File: scripts/hello.sh
================
echo "Hello, World!"

================
File: scripts/status.sh
================
uptime && df -h

================
File: static/js/main.js
================
let auth = btoa('admin:secret');

async function fetchScripts() {
    const response = await fetch('/api/scripts', {
        headers: {
            'Authorization': `Basic ${auth}`
        }
    });
    const scripts = await response.json();
    
    const scriptList = document.getElementById('scriptList');
    scriptList.innerHTML = '';
    
    Object.entries(scripts).forEach(([id, script]) => {
        const div = document.createElement('div');
        div.className = 'flex items-center justify-between p-4 bg-gray-50 rounded';
        div.innerHTML = `
            <div>
                <h3 class="font-semibold">${id}</h3>
                <p class="text-sm text-gray-600">${script.description}</p>
            </div>
            <button onclick="runScript('${id}')" 
                    class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                実行
            </button>
        `;
        scriptList.appendChild(div);
    });
}

async function runScript(scriptId) {
    try {
        const response = await fetch(`/api/run/${scriptId}`, {
            method: 'POST',
            headers: {
                'Authorization': `Basic ${auth}`
            }
        });
        const result = await response.json();
        updateLogs();
    } catch (error) {
        console.error('Error:', error);
    }
}

async function updateLogs() {
    const response = await fetch('/api/logs', {
        headers: {
            'Authorization': `Basic ${auth}`
        }
    });
    const logs = await response.json();
    
    const logList = document.getElementById('logList');
    logList.innerHTML = '';
    
    logs.reverse().forEach(log => {
        const div = document.createElement('div');
        div.className = 'p-4 bg-gray-50 rounded';
        div.innerHTML = `
            <div class="flex justify-between items-center mb-2">
                <span class="font-semibold">${log.script_id}</span>
                <span class="text-sm text-gray-600">
                    ${new Date(log.timestamp * 1000).toLocaleString()}
                </span>
            </div>
            <pre class="text-sm bg-gray-100 p-2 rounded">${log.output || log.error}</pre>
        `;
        logList.appendChild(div);
    });
}

// 初期ロード
fetchScripts();
updateLogs();
// 定期的にログを更新
setInterval(updateLogs, 5000);

================
File: static/index.html
================
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ubuntu Remote Control</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100">
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold mb-8">Ubuntu Remote Control</h1>
        
        <div class="grid md:grid-cols-2 gap-6">
            <!-- Scripts Panel -->
            <div class="bg-white rounded-lg shadow p-6">
                <h2 class="text-xl font-semibold mb-4">Available Scripts</h2>
                <div id="scriptList" class="space-y-4"></div>
            </div>

            <!-- Logs Panel -->
            <div class="bg-white rounded-lg shadow p-6">
                <h2 class="text-xl font-semibold mb-4">Execution Logs</h2>
                <div id="logList" class="space-y-4 max-h-96 overflow-y-auto"></div>
            </div>
        </div>
    </div>

    <script src="/static/js/main.js"></script>
</body>
</html>

================
File: app.py
================
from flask import Flask, request, jsonify
from functools import wraps
import subprocess
import threading
import time
import json

app = Flask(__name__)

# スクリプト辞書（初期データ）
scripts = {
    'hello': {'path': '/scripts/hello.sh', 'description': 'Hello World script'},
    'status': {'path': '/scripts/status.sh', 'description': 'System status check'}
}

# 実行ログ
execution_logs = []

# Basic認証の実装
def check_auth(username, password):
    return username == 'admin' and password == 'secret'

def requires_auth(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        auth = request.authorization
        if not auth or not check_auth(auth.username, auth.password):
            return jsonify({'error': 'Authentication required'}), 401
        return f(*args, **kwargs)
    return decorated

@app.route('/api/scripts', methods=['GET'])
@requires_auth
def get_scripts():
    return jsonify(scripts)

@app.route('/api/run/<script_id>', methods=['POST'])
@requires_auth
def run_script(script_id):
    if script_id not in scripts:
        return jsonify({'error': 'Script not found'}), 404
    
    try:
        result = subprocess.run(['bash', scripts[script_id]['path']], 
                              capture_output=True, text=True)
        log_entry = {
            'timestamp': time.time(),
            'script_id': script_id,
            'output': result.stdout,
            'error': result.stderr,
            'status': result.returncode
        }
        execution_logs.append(log_entry)
        return jsonify(log_entry)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/logs', methods=['GET'])
@requires_auth
def get_logs():
    return jsonify(execution_logs)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)

================
File: requirements.txt
================
flask==2.0.1
python-dotenv==0.19.0



================================================================
End of Codebase
================================================================
